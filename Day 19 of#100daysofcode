heap and its implementation deletion heapify heap sort ,max heap ,min heap,and priority queue;
#include <iostream>
#include<queue>
using namespace std;
class heap
{
public:
    int arr[100];
    int size;
    heap()
    {
        arr[0] = -1;
        size = 0;
    }
    void Insert(int val)
    {
        size = size + 1;
        int index = size;
        arr[size] = val;
        while (index > 1)
        {
            if (arr[index] > arr[index / 2])
            {
                swap(arr[index], arr[index / 2]);
            }
            else
            {
                return;
            }
        }
    }
   
   void deletionfromheap(){
    if(size==0){
        cout<<"Nothing to delete"<<endl;
        return ;
    }
    arr[1]=arr[size];
    size--;
    int i=1;
    while(i<size){
        int leftindex=2*i;
        int rightindex=2*i+1;
        if( leftindex<size && arr[i]<arr[leftindex]){
            swap(arr[i],arr[leftindex]);
            i=leftindex;
        }
        if( rightindex<size && arr[i]>arr[rightindex]){
            swap(arr[i],arr[rightindex]);
            i=rightindex;
        }
        else{
            return;
        }
    }
   }

    void Print()
    {
        for (int i = 1; i <= size; i++)
        {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};


void heapify(int arr[],int size,int i){
    int largest=i;
    int left=2*i;
    int right=2*i+1;
    if(left<=size && arr[largest]<arr[left]){
        largest=left;
    }
    if(right<=size && arr[largest]<arr[right]){
        largest=right;
    }
    if(largest!=i){
        swap(arr[largest],arr[i]);
        heapify(arr,size,largest);
    }
}
void sort(int arr[],int size){
    int t=size;
    while(t>1){
      swap(arr[t],arr[1]);
        t--;
        heapify(arr,size,1);
    }
}
int main()
{
    heap h;
    h.Insert(54);
    h.Insert(53);
    h.Insert(55);
    h.Insert(50);
    h.Insert(52);
    h.Print();
    h.deletionfromheap();
    h.Print();

    int arr[6]={-1,54,53,55,50,52};
    int n=5;
    for(int i=n/2;i>0;i--){
    heapify(arr,n,i);
    }
    for(int i=1;i<=n;i++){
        cout<<arr[i]<<" ";
    }cout<<endl;
    sort(arr,n);
     for(int i=1;i<=n;i++){
        cout<<arr[i]<<" ";
    }

    priority_queue<int>pq;
    pq.push(4);
    pq.push(1);
    pq.push(42);
    pq.push(47);
    pq.push(14);
cout<<pq.top()<<endl;
priority_queue<int,vector<int> ,greater<int > > miniheap;
miniheap.push(4);
    miniheap.push(1);
    miniheap.push(42);
    miniheap.push(47);
    miniheap.push(14);
cout<<miniheap.top()<<endl;


    return 0;
}
