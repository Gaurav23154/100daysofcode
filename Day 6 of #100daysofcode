Today i solved 5 binary tree problem->
  Problem no 1-> height of trees
  class Solution{
    public:
    //Function to find the height of a binary tree.
    
    int height(struct Node* node){
     if(node==NULL){
         return 0;
     }
     int left=height(node->left);
     int right=height(node->right);
     int ans=max(left,right)+1;
     return ans;
    }
    
};
Problem no 2->  Diameter of binary tree
  class Solution {
  public:
    pair<int,int> diameterfast(Node* root){
        if(root==NULL){
            pair<int,int>p=make_pair(0,0);
            return p;
        }
        pair<int,int> left=diameterfast(root->left);
        pair<int,int> right=diameterfast(root->right);
       int op1=left.first;
       int op2=right.first;
      int op3=left.second+right.second+1;
      pair<int,int> ans;
      ans.first=max(op1,max(op2,op3));
      ans.second=max(left.second,right.second)+1;
      return ans;
      
    }
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
      return diameterfast(root).first;
    }
};
Problem no 3->check for balanced tree
  class Solution{
   
    // int height(Node* root){
    //     if(root==NULL){
    //         return 0;
    //     }
    //     int left=height(root->left);
    //     int right=height(root->right);
    //     int ans=max(left,right)+1;
    //     return ans;
    // }
    public:
    pair<bool,int> isBalancefast(Node* root){
        if(root==NULL){
            pair<bool,int> p=make_pair(true,0);
            return p;
        }
        pair<bool,int> left=isBalancefast(root->left);
        pair<bool,int> right=isBalancefast(root->right);
        pair<bool,int> ans;
       bool leftbool=left.first;
       bool rightbool=right.first;
       bool diff=abs(left.second-right.second)<=1;
       ans.second=max(left.second,right.second)+1;
      
       if(leftbool && rightbool&& diff){
           ans.first=true;
       }
       else ans.first=false;
      
      return ans;
       
    }
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        
    //     if(root==NULL){
    //         return true;
    //     }
    //     bool left=isBalanced(root->left);
    //     bool right=isBalanced(root->right);
    //     bool diff=abs(height(root->left)-height(root->right))<=1;
    //     if(left&& right&& diff){
    //         return true;
    //     }
    //     else return false;
    // }
    return isBalancefast(root).first;}
};
Problem no 4->Determine two trees are identical
  class Solution
{
    public:
    //Function to check if two trees are identical.
    bool isIdentical(Node *r1, Node *r2)
    {
    if(r1==NULL and r2 ==NULL){
        return true;
    }
    if(r2==NULL and r1!=NULL){
        return false;
    }
    if(r2!=NULL and r1==NULL){
        return false;
    }
    bool left=isIdentical(r1->left,r2->left);
    bool right=isIdentical(r1->right,r2->right);
    bool value=r1->data==r2->data;
    if(left&&right&& value){
        return true;
    }
    else return false;
    }
};
Problem no 5-> sum tree or not
  pair<bool,int> issumtreefast(Node* root){
    if(root==NULL){
        pair<bool,int> p=make_pair(true,0);
        return p;
    }
    if(root->left==NULL && root->right==NULL){
        pair<bool,int> p=make_pair(true,root->data);
        return p;
    }
    pair<bool,int> left=issumtreefast(root->left);
    pair<bool,int> right=issumtreefast(root->right);
    bool leftans=left.first;
    bool rightans=right.first;
    bool val=root->data==left.second+right.second;
    pair<bool,int>ans;
    if(leftans && rightans && val ){
        ans.first=true;
        ans.second=root->data+left.second+right.second;
    }
    
    else {
        ans.first= false;
        ans.second=root->data+left.second+right.second;
    }
    return ans;
}
// Should return true if tree is Sum Tree, else false
class Solution
{
    public:
    bool isSumTree(Node* root)
    {
         return issumtreefast(root).first;
         
    }
};
