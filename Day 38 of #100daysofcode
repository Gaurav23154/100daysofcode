Problem no ->power fo 2
class Solution {
public:
    bool pow(int n){
      if(n==0){
          return false;
      }
      if(n==1 ){return true;}
        
     if(n%2==0)  
     return pow(n/2);
     else 
     return false;
    }
    bool isPowerOfTwo(int n) {
   
        return  pow(n);
       

    }
};
Revision of recursion 
#include<iostream>
#include <vector>
using namespace std;
void backtrack(int i,int N){
if(i>N){
    return;
}
backtrack(i+1,N);
cout<<i<<" ";
}
void backtrack1(int i,int N){
    if(i<1){
        return ;
    }
    backtrack1(i-1,N);
    cout<<i<<" ";
}
int  factorial( int N){
    if(N==0){
        return 1;
    }
    return N*factorial(N-1);
}
void printingsubsequece(int i , vector<int> & ans,int arr[],int n){
    if(i==n){
        for(auto it:ans){
            cout<<it<<" ";
        }
        cout<<endl;
        return ;
    }
    ans.push_back(arr[i]);
    printingsubsequece(i+1,ans,arr,n);
    ans.pop_back();
    printingsubsequece(i+1,ans,arr,n);
}
int main()
{
    int N=1;
// backtrack(1,N);
// cout<<endl;
// cout<<endl;
// N=6;
// backtrack1(N,N);
//  cout<<factorial(N)<<endl;
vector<int> ans;
int arr[]={3,1,2};
printingsubsequece(0,ans,arr,3);
return 0;
}
