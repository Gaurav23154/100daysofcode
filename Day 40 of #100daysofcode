Problem no 1-> Linked list cycle 
class Solution {
public:

    bool hasCycle(ListNode *head) {
        if(head==NULL || head->next==NULL){
          return false;
        }
        
        ListNode* slow=head;
        ListNode* fast=head;
        while(  fast !=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            
            if(slow==fast){
                return 1;
            }
        }
        return 0;
    }
};
Problem no 2-> 
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            ans=ans^nums[i];
        }
        return ans;
    }
};
